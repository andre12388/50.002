module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
    input p1first,
    input p1second,
    input p1confirm,
    input p2first,
    input p2second,
    input p2confirm,
    input resetconfirm,
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
  //  input io_button [5],    // 5 buttons on IO Shield
  //  input io_dip [3][8]     // DIP switches on IO Shield
    output ssd[8],
    output ssdd[8]
  ) {
  
  sig rst;                  // reset signal
  
  fallout_display fo_dis;
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    
    edge_detector p1confirmedge(#RISE(1), #FALL(0));
    button_conditioner p1confirmbutton;
    edge_detector p2confirmedge(#RISE(1), #FALL(0));
    button_conditioner p2confirmbutton;
    edge_detector resetconfirmedge(#RISE(1), #FALL(0));
    button_conditioner resetconfirmbutton;
    reset_conditioner reset_cond;
    
    
    
    .rst(rst){
      player1 player1;
      player2 player2;
      alu alu;
      
      dff p1value[8];
      dff p2guess[8];
      dff cmp[8];
      dff cmplt[8];
      dff turn[1];
      
      fsm state(#INIT(P1ENTER)) = {START, P1ENTER, P2ENTER, CMP, CMPLT, P1CHANGE, WIN, FINISH};
      }
  }
  
  always {
    led = 0;
    led[1] = ~turn.q;      // indicate p1's turn
    led[0] = turn.q;       // indicate p2's turn
    
   
    
    p1confirmbutton.in = p1confirm;
    p1confirmedge.in = p1confirmbutton.out;
    p2confirmbutton.in = p2confirm;
    p2confirmedge.in = p2confirmbutton.out;
    resetconfirmbutton.in = resetconfirm;
    resetconfirmedge.in = resetconfirmbutton.out;
    
    reset_cond.in = resetconfirmedge.out; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    alu.alufn = 6b110101;
    alu.a = player1.result;
    alu.b = player2.result;
    
    player1.first = p1first;
    player1.second = p1second;
    player1.confirm = p1confirm;
    
    player2.first = p2first;
    player2.second = p2second;
    player2.confirm = p2confirm;
    
    //fallout_display
    fo_dis.char[0] = player1.firstled;
    fo_dis.char[1] = player1.secondled;
    
    
    ssd[7:0] = fo_dis.segs[0];
    ssdd[7:0] = fo_dis.segs[1];
    
    io_led[0] = 8b00000000;
    io_led[1] = 8b00000000;
    io_led[2] = 8b00000000;
    
    case(state.q){
    //  state.START:
    //    if(p1confirmedge.out==1){
    //      state.d = state.P1CHANGE;
    //     }
      state.P1ENTER:
        io_led[0][7:4] = player1.firstled;     // display this digit
       
        io_led[0][3:0] = player1.secondled;    // display this digit
        io_led[1] = 0;
        if(p1confirmedge.out==1){
          turn.d = 1b1;
          p1value.d = player1.result;          // store this value to A
          io_led[0] = player1.result;          // just to see A
          state.d = state.P2ENTER;
        }
      state.P2ENTER:
        io_led[0] = player1.result;            // display this value by digits (mod)
        io_led[1][7:4] = player2.firstled;     // display this digit
        io_led[1][3:0] = player2.secondled;    // display this digit
        
    //    islessthan.d = 
        if(p2confirmedge.out==1){
          turn.d = 1b0;
          
          p2guess.d = player2.result;          // store this value to B
          io_led[1] = player2.result;          // just to see B
     //     isequal.d = player2.result-10;
          
          state.d = state.CMP;
        }
      state.CMP:
        alu.alufn = 6b000001;
        alu.a = player1.result;
        alu.b = player2.result;
        cmp.d = alu.s;
        state.d = state.CMPLT;       
        
      state.CMPLT:
        alu.alufn = 6b110101;
        alu.a = player1.result;
        alu.b = player2.result;
        cmplt.d = alu.s;
        state.d = state.P1CHANGE;
        
      state.P1CHANGE:
        //led = diff.q;						   // display the results of subtraction
        
        
        if(cmp.q==0){
          state.d = state.WIN;
        }   
        else{
          
          if(cmplt.q==0){
            io_led[2][3:0] = 4b1111;      // display lower
          }else{
            io_led[2][7:4] = 4b1111;
       //      display higher
          }
          
    //      led[0] = ~alu.s[0] ; // light up if if player1.result > player2.result
    //      led[7] = alu.s[0]; //light up if player1.result < player2.result
          if(player2.attempts==4b0111){
            state.d = state.FINISH; 
          }
        }
        
        
        p1value.d = player1.result;            // store this value to A
        io_led[0] = player1.result;            // display this value by digits (mod)
        io_led[1] = player2.result;            // display this value by digits (mod)
        
        if(p1confirmedge.out==1){
          turn.d = 1b1;
          state.d = state.P2ENTER;
        }
      state.WIN:
        io_led[0] = 8x{1};          // display win
     //   if(resetconfirmedge.out==1)
     //     state.d = state.P1ENTER;
      state.FINISH:
        io_led[1] = 8x{1};
    }
 
    //led = player1.result;
    led[7:4] = player2.attempts;
    
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
  }
}