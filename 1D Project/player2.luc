module player2 (
    input clk,  // clock
    input rst,  // reset
    input first,
    input second,
    input confirm,
    
    output firstled[4],
    output secondled[4],
    output result[8],
    output attempts[4]
  ) {

  .clk(clk){
     edge_detector first_edge(#RISE(1), #FALL(0));
     button_conditioner first_button;
     edge_detector second_edge(#RISE(1), #FALL(0));
     button_conditioner second_button;
     edge_detector confirm_edge(#RISE(1), #FALL(0));
     button_conditioner confirm_button;
    .rst(rst){
    
      alu alu;
      
      dff firstdigit[4];
      dff seconddigit[4];
      dff total[8];
      dff attemp[4];
      
      fsm state(#INIT(P2ENTER)) = {P2ENTER};
      
      }
    
    }
  
  always {
    firstled = firstdigit.q;
    secondled = seconddigit.q;
    result = total.q;
    attempts = attemp.q;
    
    first_button.in = first;
    first_edge.in = first_button.out;
    second_button.in = second;
    second_edge.in = second_button.out;
    confirm_button.in = confirm;
    confirm_edge.in = confirm_button.out;
    
    //alu
    alu.alufn = 6b000000;
    alu.a = firstdigit.q;
    alu.b = 1;
       
    case(state.q){
      state.P2ENTER:
        if(first_edge.out==1){
          if(firstdigit.q==9){
            firstdigit.d = 0;
          }else{
            alu.alufn = 6b000000;
            alu.a = firstdigit.q;
            alu.b = 1;
            firstdigit.d = alu.s[3:0];
          }
        }
        if(second_edge.out==1){
          if(seconddigit.q==9){
            seconddigit.d = 0;
          }else{
            alu.alufn = 6b000000;
            alu.a = seconddigit.q;
            alu.b = 1;
            seconddigit.d = alu.s[3:0];
          }
        }
        if(confirm_edge.out==1){
          attemp.d = attemp.q + 1;
          alu.alufn = 6b000010;
          alu.a = seconddigit.q;
          alu.b = 10;
          total.d = firstdigit.q + alu.s;
        }
    }

  }
}

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  